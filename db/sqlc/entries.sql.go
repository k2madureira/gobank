// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: entries.sql

package dbbank

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEntrie = `-- name: CreateEntrie :one
INSERT INTO entries (
  account_id, 
  amount
) VALUES (
  $1, $2
) RETURNING id, account_id, amount, create_at
`

type CreateEntrieParams struct {
	AccountID pgtype.Int8 `json:"account_id"`
	Amount    int64       `json:"amount"`
}

func (q *Queries) CreateEntrie(ctx context.Context, arg CreateEntrieParams) (Entry, error) {
	row := q.db.QueryRow(ctx, createEntrie, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreateAt,
	)
	return i, err
}

const deleteEntrie = `-- name: DeleteEntrie :exec
DELETE FROM entries
WHERE id = $1
`

func (q *Queries) DeleteEntrie(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEntrie, id)
	return err
}

const getEntrie = `-- name: GetEntrie :one
SELECT id, account_id, amount, create_at FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntrie(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRow(ctx, getEntrie, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreateAt,
	)
	return i, err
}

const listentries = `-- name: Listentries :many
SELECT id, account_id, amount, create_at FROM entries
ORDER BY account_id
`

func (q *Queries) Listentries(ctx context.Context) ([]Entry, error) {
	rows, err := q.db.Query(ctx, listentries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntrie = `-- name: UpdateEntrie :exec
UPDATE entries
  set amount = $2
WHERE id = $1
`

type UpdateEntrieParams struct {
	ID     int64 `json:"id"`
	Amount int64 `json:"amount"`
}

func (q *Queries) UpdateEntrie(ctx context.Context, arg UpdateEntrieParams) error {
	_, err := q.db.Exec(ctx, updateEntrie, arg.ID, arg.Amount)
	return err
}
